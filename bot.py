import config
import random
import os
from googleapiclient.discovery import build
from google.oauth2 import service_account
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from states import Estate
from states import Admin
from a1range import A1Range
import keyboards as kbru
import keyboardsua as kbua
import keyboardseng as kbeng
from data_base import sqlite_db
from aiogram.utils.exceptions import MessageNotModified

bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

appart_info = ""
request_id = 1
number_of_rooms = 0
money = 0
area = ""
phone_number = ""
ID = None
disc = ""
greeting = '–Ø - <b>—Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Grifon</b>, –ú—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ' \
           '–ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏! '
order_name = ""
order_phone_num = ""
bid_text = ""
estates_info = ""
area_info = ""
money_info = ""

# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials.json')
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
SAMPLE_SPREADSHEET_ID = config.TABLE_ID
SAMPLE_RANGE_NAME = '–õ–∏—Å—Ç1'
service = build(
    'sheets', 'v4', credentials=credentials).spreadsheets().values()
result = service.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                     range=SAMPLE_RANGE_NAME).execute()
data_from_sheet = result.get('values', [])
batch_clear_values_request_body = {
    'ranges': ["–õ–∏—Å—Ç1!A2:H1000"],
}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


async def on_startup(_):
    print("–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω")
    sqlite_db.sql_start()


# –û—á–∏—Å—Ç–∫–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º


async def clear_gs():
    service.batchClear(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                       body=batch_clear_values_request_body).execute()


# ////–ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å////


def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler(commands=['admin'], state="*")
async def make_changes_command(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        if check_sub_channel(await bot.get_chat_member(chat_id=config.CHAT_ID, user_id=message.from_user.id)):
            global ID
            ID = message.from_user.id
            admin_name = message.from_user.first_name
            await bot.send_message(message.from_user.id,
                                   text="–£–≤–∞–∂–∞–µ–º—ã–π <b>" + str(admin_name) + "</b>, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                   parse_mode='HTML', reply_markup=kbru.admin_main_markup)
        else:
            await state.reset_state(with_data=False)
            await bot.send_message(message.from_user.id, '–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞',
                                   reply_markup=kbru.menu_markup)


@dp.callback_query_handler(text_contains="admin", state="*")
async def admin_buttons(call: types.CallbackQuery, state: FSMContext):
    if call.data == "admin_delete":
        await Admin.delete_id.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:',
                                    reply_markup=kbru.admin_sub_markup)
    elif call.data == 'admin_exit':
        await state.finish()
        await Estate.lang.set()
        await bot.answer_callback_query(call.id, text="–í—ã –≤—ã—à–ª–∏ —Å –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ë–æ—Ç–∞ üëá", reply_markup=kbru.lang_markup)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–µ


@dp.callback_query_handler(text="bid_connect")
async def connect_button(call: types.CallbackQuery):
    bid_msg_id = call.message.message_id
    await sqlite_db.sql_view1_call_command(bid_msg_id)
    await sqlite_db.sql_change_call_command(bid_msg_id, call.from_user.id)
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=config.CHAT_ID, message_id=call.message.message_id,
                                text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \n\nüîπ –§–ò–û: " + str(
                                    sqlite_db.call_name) + "\nüî∏ –Ø–∑—ã–∫: " + str(
                                    sqlite_db.call_lang) + "\nüîπ –ù–æ–º–µ—Ä: " + str(
                                    sqlite_db.call_phone) + "\nüî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `" + str(
                                    sqlite_db.call_comment) + "` \n\nüë§ –ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª(–∞): " + str(
                                    call.from_user.first_name) + "", parse_mode='Markdown')
    await bot.send_message(call.from_user.id,
                           "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫: \n\nüîπ –§–ò–û: " + str(sqlite_db.call_name) + "\nüî∏ –Ø–∑—ã–∫: " + str(
                               sqlite_db.call_lang) + "\nüîπ –ù–æ–º–µ—Ä: " + str(
                               sqlite_db.call_phone) + "\nüî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `" + str(sqlite_db.call_comment) + "`",
                           parse_mode='Markdown', reply_markup=kbru.admin_bid_markup)
    sqlite_db.call_name = ""
    sqlite_db.call_phone = ""
    sqlite_db.call_comment = ""
    sqlite_db.call_lang = ""


# –û—Ç–∫–∞–∑ –æ—Ç –∑–∞—è–≤–∫–∏


@dp.callback_query_handler(text_contains="bidmenu")
async def bid_menu_button(call: types.CallbackQuery):
    if call.data == "bidmenu_reject":
        await bot.answer_callback_query(call.id, text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—è–≤–∫–∏!", show_alert=True)
        await sqlite_db.sql_view2_call_command(call.from_user.id)
        empty_manager = ""
        await sqlite_db.sql_change_call_command(sqlite_db.call_message, empty_manager)
        await bot.edit_message_text(chat_id=config.CHAT_ID, message_id=sqlite_db.call_message,
                                    text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \n\nüîπ –§–ò–û: " + str(
                                        sqlite_db.call_name) + "\nüî∏ –Ø–∑—ã–∫: " + str(
                                        sqlite_db.call_lang) + "\nüîπ –ù–æ–º–µ—Ä: " + str(
                                        sqlite_db.call_phone) + "\nüî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `" + str(
                                        sqlite_db.call_comment) + "`", parse_mode='Markdown',
                                    reply_markup=kbru.admin_chat_markup)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kbru.admin_main_markup)
        sqlite_db.call_name = ""
        sqlite_db.call_phone = ""
        sqlite_db.call_message = ""
        sqlite_db.call_comment = ""
        sqlite_db.call_lang = ""

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏


@dp.message_handler(state=Admin.delete_id)
async def delete_request(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        async with state.proxy() as data:
            data['delete_id'] = message.text
        await sqlite_db.sql_delete_command(data['delete_id'], message, state)
        await sqlite_db.sql_parse_command()
        await clear_gs()
        if sqlite_db.del_check:
            if sqlite_db.parse:
                array = {'values': sqlite_db.parse}
                range_ = A1Range.create_a1range_from_list(
                    '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                               range=range_,
                               valueInputOption='RAW', body=array).execute()
                await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'],
                                       reply_markup=kbru.admin_main_markup)
                await state.finish()
            else:
                await bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑—è–≤–∫—É —Å ID: " + data['delete_id'],
                                       reply_markup=kbru.admin_main_markup)
                await state.finish()
        else:
            if sqlite_db.parse:
                array = {'values': sqlite_db.parse}
                range_ = A1Range.create_a1range_from_list(
                    '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
                service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                               range=range_,
                               valueInputOption='RAW', body=array).execute()
            else:
                return


@dp.callback_query_handler(state=Admin.delete_id, text="sub_cancel")
async def cancel_delete(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kbru.admin_main_markup)


# ////–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å////

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


@dp.message_handler(commands=['start'], state="*")
async def language(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.finish()
        await Estate.lang.set()
        await bot.send_sticker(message.from_user.id,
                               r'CAACAgIAAxkBAAEEKuxiMHggQNoJKse-Kg4aQkbmTCXEmgACthUAAkwaiUmFljrdCwZhOCME')
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ë–æ—Ç–∞ üëá", reply_markup=kbru.lang_markup)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞


@dp.callback_query_handler(text_contains="lang", state=Estate.lang)
async def welcome(call: types.CallbackQuery, state: FSMContext):
    if call.data == "lang_ru":
        await bot.answer_callback_query(call.id)
        async with state.proxy() as data:
            data['lang'] = "RU"
        await state.reset_state(with_data=False)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + call.from_user.first_name + " üëã\n–Ø - <b>—Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Grifon</b>, –ú—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ª—É–≥–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!",
                                    parse_mode='html', reply_markup=kbru.menu_markup)
    elif call.data == "lang_ua":
        await bot.answer_callback_query(call.id)
        async with state.proxy() as data:
            data['lang'] = "UA"
        await state.reset_state(with_data=False)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, " + call.from_user.first_name + " üëã\n–Ø - <b>—Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Grifon</b>, –ú–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è, —â–æ –Ω–∞–¥–∞—î –ø–æ—Å–ª—É–≥–∏ —à–≤–∏–¥–∫–æ–≥–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ!",
                                    parse_mode='html', reply_markup=kbua.menu_markup)
    elif call.data == "lang_eng":
        await bot.answer_callback_query(call.id)
        async with state.proxy() as data:
            data['lang'] = "ENG"
        await state.reset_state(with_data=False)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="Welcome, " + call.from_user.first_name + " üëã\nI am <b>your personal assistant Grifon</b>, We are an organization that provides services for fast and high-quality selection of real estate!",
                                    parse_mode='html', reply_markup=kbeng.menu_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏


@dp.callback_query_handler(text_contains="menu")
async def menu_buttons(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == 'menu_about':
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[0],
                                    reply_markup=kb.about_markup)
    elif call.data == 'menu_estate':
        await bot.answer_callback_query(call.id)
        await Estate.estates.set()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[1],
                                    reply_markup=kb.estate_markup)
    if call.data == 'menu_managers':
        await bot.answer_callback_query(call.id)
        await Admin.order_phone_num.set()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.from_user.id, text=bot_text[2], reply_markup=kb.contact_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥


@dp.message_handler(state=Admin.order_phone_num)
async def check_call_request(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        async with state.proxy() as data:
            if data['lang'] == "RU":
                bot_text = config.LANG_RU
                kb = kbru
            elif data['lang'] == "UA":
                bot_text = config.LANG_UA
                kb = kbua
            elif data['lang'] == "ENG":
                bot_text = config.LANG_ENG
                kb = kbeng
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞" or message.text == "‚ùå C–∫–∞—Å—É–≤–∞–Ω–Ω—è" or message.text == "‚ùå Cancel":
            await state.reset_state(with_data=False)
            await bot.send_message(message.from_user.id, bot_text[5], parse_mode='html', reply_markup=kb.menu_markup)
        else:
            async with state.proxy() as data:
                data['id'] = random.randint(1000, 9999)
            async with state.proxy() as data:
                data['name'] = message.from_user.first_name
            phone = message.text
            if phone.startswith("+"):
                async with state.proxy() as data:
                    data['phone_num'] = phone
            else:
                phone_num = "+" + str(phone)
                async with state.proxy() as data:
                    data['phone_num'] = phone_num
            async with state.proxy() as data:
                data['manager'] = ""
            await Admin.next()
            await bot.send_message(message.from_user.id, bot_text[16], reply_markup=kb.comment_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç


@dp.message_handler(content_types=['contact'], state=Admin.order_phone_num)
async def create_call_order(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        async with state.proxy() as data:
            if data['lang'] == "RU":
                bot_text = config.LANG_RU
                kb = kbru
            elif data['lang'] == "UA":
                bot_text = config.LANG_UA
                kb = kbua
            elif data['lang'] == "ENG":
                bot_text = config.LANG_ENG
                kb = kbeng
        async with state.proxy() as data:
            data['id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = message.from_user.first_name
        phone = message.contact.phone_number
        if phone.startswith("+"):
            async with state.proxy() as data:
                data['phone_num'] = phone
        else:
            phone_num = "+" + str(phone)
            async with state.proxy() as data:
                data['phone_num'] = phone_num
        async with state.proxy() as data:
            data['manager'] = ""
        await Admin.next()
        await bot.send_message(message.from_user.id, bot_text[16], reply_markup=kb.comment_markup)


@dp.message_handler(state=Admin.order_comment)
async def create_call_order(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    async with state.proxy() as data:
        data['order_comment'] = message.text
    await bot.send_message(message.from_user.id, bot_text[4], reply_markup=kb.menu_markup)
    msg = await bot.send_message(chat_id=config.CHAT_ID,
                                 text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \n\nüîπ –§–ò–û: " + str(data['name']) + "\nüî∏ –Ø–∑—ã–∫: " + (
                                     data['lang']) + "\nüîπ –ù–æ–º–µ—Ä: " + (data['phone_num']) + "\nüî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `" + (
                                          data['order_comment']) + "`", parse_mode='Markdown',
                                 reply_markup=kbru.admin_chat_markup)
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
    await sqlite_db.sql_add_call_command(state)
    await state.reset_state(with_data=False)


@dp.callback_query_handler(state=Admin.order_comment, text="following_btn")
async def connect_button(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    async with state.proxy() as data:
        data['order_comment'] = "-"
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[4],
                                reply_markup=kb.menu_markup)
    msg = await bot.send_message(chat_id=config.CHAT_ID,
                                 text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ \n\nüîπ –§–ò–û: " + str(data['name']) + "\nüî∏ –Ø–∑—ã–∫: " + (
                                     data['lang']) + "\nüîπ –ù–æ–º–µ—Ä: " + (data['phone_num']) + "\nüî∏ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `" + (
                                          data['order_comment']) + "`", parse_mode='Markdown',
                                 reply_markup=kbru.admin_chat_markup)
    async with state.proxy() as data:
        data['message_id'] = msg.message_id
    await sqlite_db.sql_add_call_command(state)
    await state.reset_state(with_data=False)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –û –Ω–∞—Å: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥


@dp.callback_query_handler(text="about_back")
async def check_call_request(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[5],
                                parse_mode=types.ParseMode.HTML, reply_markup=kb.menu_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏


@dp.callback_query_handler(state=Estate.estates, text_contains="estate")
async def estate_buttons(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == "estate_buy":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[6],
                                    reply_markup=kb.rooms_markup)
    elif call.data == "estate_sell":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[7],
                                    reply_markup=kb.rooms_markup)
    if call.data == "estate_rent":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–°–Ω—è—Ç—å –∂–∏–ª—å–µ"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[6],
                                    reply_markup=kb.rooms_markup)
    elif call.data == "estate_rent_out":
        async with state.proxy() as data:
            data['user_id'] = random.randint(1000, 9999)
        async with state.proxy() as data:
            data['name'] = call.from_user.first_name
        async with state.proxy() as data:
            data['estates'] = "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[7],
                                    reply_markup=kb.rooms_markup)
    if call.data == 'estate_back':
        await state.reset_state(with_data=False)
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[5],
                                    parse_mode='html', reply_markup=kb.menu_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(state=Estate.rooms, text_contains="room")
async def estate_buttons(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == "room_1":
        async with state.proxy() as data:
            data['rooms'] = "1"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[8], reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[9], reply_markup=kb.rent_markup)
    elif call.data == "room_2":
        async with state.proxy() as data:
            data['rooms'] = "2"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[8], reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[9], reply_markup=kb.rent_markup)
    elif call.data == "room_3":
        async with state.proxy() as data:
            data['rooms'] = "3"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[8], reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[9], reply_markup=kb.rent_markup)
    elif call.data == "room_4more":
        async with state.proxy() as data:
            data['rooms'] = "4+"
        await Estate.next()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[8], reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[9], reply_markup=kb.rent_markup)
    if call.data == 'room_back':
        await state.reset_state(with_data=False)
        await Estate.estates.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[1],
                                    reply_markup=kb.estate_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç - –¶–µ–Ω–∞: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏(–ø–æ–∫—É–ø–∫–∞)


@dp.callback_query_handler(state=Estate.money, text_contains="pricebuy")
async def second_question_buy(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng

    if call.data == 'pricebuy_one':
        async with state.proxy() as data:
            data['money'] = '–î–æ 25.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    if call.data == 'pricebuy_two':
        async with state.proxy() as data:
            data['money'] = '25.000 - 45.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_three':
        async with state.proxy() as data:
            data['money'] = '45.000 - 65.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_four':
        async with state.proxy() as data:
            data['money'] = '65.000 - 90.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_five':
        async with state.proxy() as data:
            data['money'] = '90.000 - 130.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_six':
        async with state.proxy() as data:
            data['money'] = '–û—Ç 130.000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[10],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricebuy_back':
        await state.reset_state(with_data=False)
        await Estate.rooms.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[6],
                                    reply_markup=kb.rooms_markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å–µ - –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç - –¶–µ–Ω–∞: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏(–∞—Ä–µ–Ω–¥–∞)
@dp.callback_query_handler(state=Estate.money, text_contains="pricerent")
async def second_question_rent(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == 'pricerent_one':
        async with state.proxy() as data:
            data['money'] = '–î–æ 350 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[11],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricerent_two':
        async with state.proxy() as data:
            data['money'] = '350 - 500 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[11],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricerent_three':
        async with state.proxy() as data:
            data['money'] = '500 - 700 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[11],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricerent_four':
        async with state.proxy() as data:
            data['money'] = '700 - 1000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[11],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricerent_five':
        async with state.proxy() as data:
            data['money'] = '–í—ã—à–µ 1000 $'
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[11],
                                    reply_markup=kb.area_markup)
    elif call.data == 'pricerent_back':
        await state.reset_state(with_data=False)
        await Estate.rooms.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[7],
                                    reply_markup=kb.rooms_markup)


# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(state=Estate.area, text_contains="area")
async def third_question(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == 'area_one':
        async with state.proxy() as data:
            data['area'] = "C—É–≤–æ—Ä–æ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, bot_text[12], reply_markup=kb.contact_markup)
    elif call.data == 'area_two':
        async with state.proxy() as data:
            data['area'] = "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, bot_text[12], reply_markup=kb.contact_markup)
    elif call.data == 'area_three':
        async with state.proxy() as data:
            data['area'] = "–ö–∏–µ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, bot_text[12], reply_markup=kb.contact_markup)
    if call.data == 'area_four':
        async with state.proxy() as data:
            data['area'] = "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, bot_text[12], reply_markup=kb.contact_markup)
    if call.data == 'area_five':
        async with state.proxy() as data:
            data['area'] = "–û–¥–µ—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
        await Estate.next()
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, bot_text[12], reply_markup=kb.contact_markup)
    if call.data == 'area_back':
        await state.reset_state(with_data=False)
        await Estate.money.set()
        if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" or data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[8], reply_markup=kb.buy_markup)
        elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ" or data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
            await bot.answer_callback_query(call.id)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=bot_text[9], reply_markup=kb.rent_markup)


# –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞


@dp.message_handler(state=Estate.phone_num)
async def check_call_request(message: types.Message, state: FSMContext):
    global estates_info, area_info, money_info
    if message.chat.type == 'private':
        async with state.proxy() as data:
            if data['lang'] == "RU":
                bot_text = config.LANG_RU
                kb = kbru
            elif data['lang'] == "UA":
                bot_text = config.LANG_UA
                kb = kbua
            elif data['lang'] == "ENG":
                bot_text = config.LANG_ENG
                kb = kbeng
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞" or message.text == "‚ùå C–∫–∞—Å—É–≤–∞–Ω–Ω—è" or message.text == "‚ùå Cancel":
            await state.reset_state(with_data=False)
            await message.reply(bot_text[13], reply_markup=kb.menu_markup)
        else:
            phone = message.text
            if phone.startswith("+"):
                async with state.proxy() as data:
                    data['phone_num'] = phone
            else:
                phone_num = "+" + str(phone)
                async with state.proxy() as data:
                    data['phone_num'] = phone_num
            async with state.proxy() as data:
                if data['lang'] == "RU":
                    bot_text = config.LANG_RU
                    kb = kbru
                    await Estate.next()
                    await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: \n\nüè† –û–ø–µ—Ä–∞—Ü–∏—è: " + str(
                        data['estates']) + "\nüåê –†–∞–π–æ–Ω: " + str(data['area']) + " \nüî¢ –ö–æ–º–Ω–∞—Ç—ã: " + str(
                        data['rooms']) + "\nüíµ –¶–µ–Ω–∞ (–¥–æ–ª.): " + str(data['money']) + "\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + str(
                        data['phone_num']) + "\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=kb.finish_markup)
                elif data['lang'] == "UA":
                    bot_text = config.LANG_UA
                    kb = kbua
                    lang = "UA_TEXT"
                    await translate_text(state, lang)
                    await Estate.next()
                    await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞: \n\nüè† –û–ø–µ—Ä–∞—Ü—ñ—è: " + str(
                        estates_info) + "\nüåê –†–∞–π–æ–Ω: " + str(area_info) + " \nüî¢ –ö—ñ–º–Ω–∞—Ç–∏: " + str(
                        data['rooms']) + "\nüíµ –¶—ñ–Ω–∞ (–¥–æ–ª.): " + str(data['money']) + "\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + str(
                        data['phone_num']) + "\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?", reply_markup=kb.finish_markup)
                    estates_info = ""
                    area_info = ""
                elif data['lang'] == "ENG":
                    bot_text = config.LANG_ENG
                    kb = kbeng
                    lang = "ENG_TEXT"
                    await translate_text(state, lang)
                    await Estate.next()
                    await bot.send_message(message.from_user.id,
                                           "Your application has been completed: \n\nüè† Operation: " + str(
                                               estates_info) + "\nüåê Area: " + str(area_info) + " \nüî¢ Rooms: " + str(
                                               data['rooms']) + "\nüíµ Price (USD): " + str(
                                               money_info) + "\nüìû Phone number: " + str(
                                               data['phone_num']) + "\n\nEverything is correct?",
                                           reply_markup=kb.finish_markup)
                    estates_info = ""
                    area_info = ""
                    money_info = ""


@dp.message_handler(content_types=['contact'], state=Estate.phone_num)
async def fourth_question(message: types.Message, state: FSMContext):
    global estates_info, area_info, money_info
    if message.chat.type == 'private':
        phone = message.contact.phone_number
        if phone.startswith("+"):
            async with state.proxy() as data:
                data['phone_num'] = phone
        else:
            phone_num = "+" + str(phone)
            async with state.proxy() as data:
                data['phone_num'] = phone_num
        async with state.proxy() as data:
            if data['lang'] == "RU":
                bot_text = config.LANG_RU
                kb = kbru
                await Estate.next()
                await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: \n\nüè† –û–ø–µ—Ä–∞—Ü–∏—è: " + str(
                    data['estates']) + "\nüåê –†–∞–π–æ–Ω: " + str(data['area']) + " \nüî¢ –ö–æ–º–Ω–∞—Ç—ã: " + str(
                    data['rooms']) + "\nüíµ –¶–µ–Ω–∞ (–¥–æ–ª.): " + str(data['money']) + "\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + str(
                    data['phone_num']) + "\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=kb.finish_markup)
            elif data['lang'] == "UA":
                bot_text = config.LANG_UA
                kb = kbua
                lang = "UA_TEXT"
                await translate_text(state, lang)
                await Estate.next()
                await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞: \n\nüè† –û–ø–µ—Ä–∞—Ü—ñ—è: " + str(
                    estates_info) + "\nüåê –†–∞–π–æ–Ω: " + str(area_info) + " \nüî¢ –ö—ñ–º–Ω–∞—Ç–∏: " + str(
                    data['rooms']) + "\nüíµ –¶—ñ–Ω–∞ (–¥–æ–ª.): " + str(data['money']) + "\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + str(
                    data['phone_num']) + "\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?", reply_markup=kb.finish_markup)
                estates_info = ""
                area_info = ""
            elif data['lang'] == "ENG":
                bot_text = config.LANG_ENG
                kb = kbeng
                lang = "ENG_TEXT"
                await translate_text(state, lang)
                await Estate.next()
                await bot.send_message(message.from_user.id,
                                       "Your application has been completed: \n\nüè† Operation: " + str(
                                           estates_info) + "\nüåê Area: " + str(area_info) + " \nüî¢ Rooms: " + str(
                                           data['rooms']) + "\nüíµ Price (USD): " + str(
                                           money_info) + "\nüìû Phone number: " + str(
                                           data['phone_num']) + "\n\nEverything is correct?",
                                       reply_markup=kb.finish_markup)
                estates_info = ""
                area_info = ""
                money_info = ""


async def translate_text(state: FSMContext, lang):
    global estates_info, area_info, money_info
    if lang == "UA_TEXT":
        async with state.proxy() as data:
            if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
                estates_info = "–ö—É–ø–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
            elif data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
                estates_info = "–ü—Ä–æ–¥–∞—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
            elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ":
                estates_info = "–ó–Ω—è—Ç–∏ –∂–∏—Ç–ª–æ"
            elif data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
                estates_info = "–ó–¥–∞—Ç–∏ –≤ –æ—Ä–µ–Ω–¥—É –∂–∏—Ç–ª–æ"
            if data['area'] == "C—É–≤–æ—Ä–æ–≤—Å–∫–∏–π":
                area_info = "–°—É–≤–æ—Ä–æ–≤—Å—å–∫–∏–π"
            elif data['area'] == "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π":
                area_info = "–ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π"
            elif data['area'] == "–ö–∏–µ–≤—Å–∫–∏–π":
                area_info = "–ö–∏—ó–≤—Å—å–∫–∏–π"
            elif data['area'] == "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π":
                area_info = "–ú–∞–ª–∏–Ω–æ–≤—Å—å–∫–∏–π"
            elif data['area'] == "–û–¥–µ—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":
                area_info = "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"

    elif lang == "ENG_TEXT":
        async with state.proxy() as data:
            if data['estates'] == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
                estates_info = "Buy estate"
            elif data['estates'] == "–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
                estates_info = "Sell estate"
            elif data['estates'] == "–°–Ω—è—Ç—å –∂–∏–ª—å–µ":
                estates_info = "Rent estate"
            elif data['estates'] == "–°–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å–µ":
                estates_info = "Rent out estate"
            if data['area'] == "C—É–≤–æ—Ä–æ–≤—Å–∫–∏–π":
                area_info = "Suvorov area"
            elif data['area'] == "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π":
                area_info = "Primorskiy area"
            elif data['area'] == "–ö–∏–µ–≤—Å–∫–∏–π":
                area_info = "Kyiv area"
            elif data['area'] == "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π":
                area_info = "Malinowski area"
            elif data['area'] == "–û–¥–µ—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":
                area_info = "Odessa region"
            if data['money'] == '–î–æ 350 $':
                money_info = "Up to $ 350"
            elif data['money'] == '350 - 500 $':
                money_info = "350 - 500 $"
            elif data['money'] == '500 - 700 $':
                money_info = "500 - 700 $"
            elif data['money'] == '700 - 1000 $':
                money_info = "700 - 1000 $"
            elif data['money'] == '–í—ã—à–µ 1000 $':
                money_info = "Higher than $ 1,000"
            if data['money'] == '–î–æ 25.000 $':
                money_info = "Up to 25.000 $"
            elif data['money'] == '25.000 - 45.000 $':
                money_info = "25.000 - 45.000 $"
            if data['money'] == '45.000 - 65.000 $':
                money_info = "45.000 - 65.000 $"
            elif data['money'] == '65.000 - 90.000 $':
                money_info = "65.000 - 90.000 $"
            if data['money'] == '90.000 - 130.000 $':
                money_info = "90.000 - 130.000 $"
            elif data['money'] == '130.000 - 250.000 $':
                money_info = "130.000 - 250.000 $"
            if data['money'] == '–û—Ç 130.000 $':
                money_info = "Higher than 130.000 $"


@dp.callback_query_handler(state=Estate.finish, text_contains="finish")
async def final_question(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if data['lang'] == "RU":
            bot_text = config.LANG_RU
            kb = kbru
        elif data['lang'] == "UA":
            bot_text = config.LANG_UA
            kb = kbua
        elif data['lang'] == "ENG":
            bot_text = config.LANG_ENG
            kb = kbeng
    if call.data == "finish_yes":
        await sqlite_db.sql_add_command(state)
        await sqlite_db.sql_parse_command()
        await clear_gs()
        array = {'values': sqlite_db.parse}
        range_ = A1Range.create_a1range_from_list(
            '–õ–∏—Å—Ç1', 2, 1, array['values']).format()
        service.update(spreadsheetId=SAMPLE_SPREADSHEET_ID,
                       range=range_,
                       valueInputOption='RAW',
                       body=array).execute()
        await state.reset_state(with_data=False)
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[14],
                                    reply_markup=kb.menu_markup)
        await bot.send_message(chat_id=config.CHAT_ID,
                               text="üîî –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é \n\nüîπ ID –∑–∞—è–≤–∫–∏: " + str(
                                   data['user_id']) + "\nüî∏ –§–ò–û: " + str(data['name']) + "\nüîπ –ù–æ–º–µ—Ä: " + (
                                        data['phone_num']) + "", parse_mode='html', reply_markup=kbru.details_markup)
    elif call.data == "finish_no":
        await state.reset_state(with_data=False)
        await Estate.estates.set()
        await bot.answer_callback_query(call.id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=bot_text[15],
                                    reply_markup=kb.estate_markup)


# ***********************************–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞***********************************


@dp.errors_handler(exception=MessageNotModified)  # for skipping this exception
async def message_not_modified_handler():
    return True


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
